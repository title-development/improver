{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Application VPC and RDS Instance",
  "Mappings": {
    "VpcCidrs": {
      "eu-central-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "sa-east-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "ap-northeast-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "eu-west-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24"
      },
      "us-east-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "us-west-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "us-west-2": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "ap-southeast-2": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      },
      "ap-southeast-1": {
        "vpc": "10.0.0.0/16",
        "pubsubnet1": "10.0.0.0/24",
        "pubsubnet2": "10.0.1.0/24",
        "privdatasubnet1": "10.0.20.0/24",
        "privdatasubnet2": "10.0.21.0/24"
      }
    },
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "PV64"
      },
      "m1.medium": {
        "Arch": "PV64"
      },
      "m1.large": {
        "Arch": "PV64"
      },
      "m1.xlarge": {
        "Arch": "PV64"
      },
      "m2.xlarge": {
        "Arch": "PV64"
      },
      "m2.2xlarge": {
        "Arch": "PV64"
      },
      "m2.4xlarge": {
        "Arch": "PV64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "c1.medium": {
        "Arch": "PV64"
      },
      "c1.xlarge": {
        "Arch": "PV64"
      },
      "c3.large": {
        "Arch": "HVM64"
      },
      "c3.xlarge": {
        "Arch": "HVM64"
      },
      "c3.2xlarge": {
        "Arch": "HVM64"
      },
      "c3.4xlarge": {
        "Arch": "HVM64"
      },
      "c3.8xlarge": {
        "Arch": "HVM64"
      },
      "c4.large": {
        "Arch": "HVM64"
      },
      "c4.xlarge": {
        "Arch": "HVM64"
      },
      "c4.2xlarge": {
        "Arch": "HVM64"
      },
      "c4.4xlarge": {
        "Arch": "HVM64"
      },
      "c4.8xlarge": {
        "Arch": "HVM64"
      },
      "g2.2xlarge": {
        "Arch": "HVMG2"
      },
      "r3.large": {
        "Arch": "HVM64"
      },
      "r3.xlarge": {
        "Arch": "HVM64"
      },
      "r3.2xlarge": {
        "Arch": "HVM64"
      },
      "r3.4xlarge": {
        "Arch": "HVM64"
      },
      "r3.8xlarge": {
        "Arch": "HVM64"
      },
      "i2.xlarge": {
        "Arch": "HVM64"
      },
      "i2.2xlarge": {
        "Arch": "HVM64"
      },
      "i2.4xlarge": {
        "Arch": "HVM64"
      },
      "i2.8xlarge": {
        "Arch": "HVM64"
      },
      "d2.xlarge": {
        "Arch": "HVM64"
      },
      "d2.2xlarge": {
        "Arch": "HVM64"
      },
      "d2.4xlarge": {
        "Arch": "HVM64"
      },
      "d2.8xlarge": {
        "Arch": "HVM64"
      },
      "hi1.4xlarge": {
        "Arch": "HVM64"
      },
      "hs1.8xlarge": {
        "Arch": "HVM64"
      },
      "cr1.8xlarge": {
        "Arch": "HVM64"
      },
      "cc2.8xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-0f4cfd64",
        "HVM64": "ami-0d4cfd66",
        "HVMG2": "ami-5b05ba30"
      },
      "us-west-2": {
        "PV64": "ami-d3c5d1e3",
        "HVM64": "ami-d5c5d1e5",
        "HVMG2": "ami-a9d6c099"
      },
      "us-west-1": {
        "PV64": "ami-85ea13c1",
        "HVM64": "ami-87ea13c3",
        "HVMG2": "ami-37827a73"
      },
      "eu-west-1": {
        "PV64": "ami-d6d18ea1",
        "HVM64": "ami-e4d18e93",
        "HVMG2": "ami-72a9f105"
      },
      "eu-central-1": {
        "PV64": "ami-a4b0b7b9",
        "HVM64": "ami-a6b0b7bb",
        "HVMG2": "ami-a6c9cfbb"
      },
      "ap-northeast-1": {
        "PV64": "ami-1a1b9f1a",
        "HVM64": "ami-1c1b9f1c",
        "HVMG2": "ami-f644c4f6"
      },
      "ap-southeast-1": {
        "PV64": "ami-d24b4280",
        "HVM64": "ami-d44b4286",
        "HVMG2": "ami-12b5bc40"
      },
      "ap-southeast-2": {
        "PV64": "ami-ef7b39d5",
        "HVM64": "ami-db7b39e1",
        "HVMG2": "ami-b3337e89"
      },
      "sa-east-1": {
        "PV64": "ami-5b098146",
        "HVM64": "ami-55098148",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-north-1": {
        "PV64": "ami-bec45887",
        "HVM64": "ami-bcc45885",
        "HVMG2": "NOT_SUPPORTED"
      }
    }
  },
  "Parameters": {
    "VpcId": {
      "Type": "String",
      "Description": "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
      "Default": "",
      "AllowedPattern": "^(?:vpc-[0-9a-f]{8,17}|)$",
      "ConstraintDescription": "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created"
    },
    "HostedZoneId": {
      "Type": "String",
      "Description": "Optional - Hosted Zone Id. Leave blank to have a new Hosted Zone created. Can contain only ASCII characters.",
      "Default": ""
    },
    "VpcAvailabilityZones": {
      "Type": "CommaDelimitedList",
      "Description": "Optional : Comma-delimited list of two VPC availability zones in which to create subnets. Otherwise the first two Availability Zones for a specified region will be used.",
      "Default": ""
    },
    "SubnetIds": {
      "Type": "CommaDelimitedList",
      "Description": "Optional - Comma separated list of existing VPC Subnet Ids where DB and NAT will run.",
      "Default": ""
    },
    "NatInstanceType": {
      "Description": "NAT instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "String",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the NAT instances",
      "Default": "aws"
    },
    "EnvironmentName": {
      "Type": "String",
      "Description": "Environment name.",
      "Default": "qa",
      "AllowedValues": [
        "dev",
        "stg",
        "qa",
        "prod"
      ]
    },
    "DomainName": {
      "Description": "Hosted domain zone name.",
      "AllowedPattern": ".*([-a-zA-Z0-9]{1,99})\\.([-a-zA-Z0-9]{1,99})",
      "ConstraintDescription": "Must be a valid domain name like example.com",
      "Type": "String"
    },
    "DBName": {
      "Default": "improve",
      "Description": "Required - Database name.",
      "Type": "String"
    },
    "DBUsername": {
      "Default": "postgres",
      "Description": "Required - Username of database.",
      "Type": "String"
    },
    "DBPassword": {
      "Default": "password",
      "AllowedPattern": "[a-zA-Z0-9]{8,128}",
      "Description": "Required - Password for database. Must contain from 8 to 128 alphanumeric characters.",
      "NoEcho" : "true",
      "Type": "String"
    },
    "AllocatedStorage": {
      "Description": "How much database storage do you need?  GB implied.",
      "Type": "String",
      "Default": "20"
    },
    "RDSBackupRetentionPeriod": {
      "Description": "Designates the number of daily snapshots to persist.",
      "Type": "String",
      "Default": "0"
    },
    "DBInstanceType": {
      "Description": "What size of DBInstance do you want?",
      "Type": "String",
      "Default": "db.t2.micro"
    },
    "TrustedOfficeIp": {
      "Description": "Allow SSH access from the office/VPN.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "213.109.234.82/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },
  "Conditions": {
    "UseSpecifiedVpcAvailabilityZones": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Join": [
                "",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "CreateVpcResources": {
      "Fn::Equals": [
        {
          "Ref": "VpcId"
        },
        ""
      ]
    },
    "CreateHostedZone": {
      "Fn::Equals": [
        {
          "Ref": "HostedZoneId"
        },
        ""
      ]
    }
  },
  "Resources": {
    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "DBName"
        },
        "Engine": "postgres",
        "EngineVersion": "10.4",
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "DBInstanceClass": {
          "Ref": "DBInstanceType"
        },
        "DBSubnetGroupName": {
          "Ref": "DBInstanceSubnetGroup"
        },
        "AllocatedStorage": {
          "Ref": "AllocatedStorage"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ]
      }
    },
    "DBInstanceSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "SubnetIds": [
          {
            "Ref": "PrivDataSubnetAz1"
          },
          {
            "Ref": "PrivDataSubnetAz2"
          }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Open database for access",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Fn::FindInMap": [
                "VpcCidrs",
                {
                  "Ref": "AWS::Region"
                },
                "vpc"
              ]
            }
          },
          {
            "Description": "Security group ingress rule for trusted office IP",
            "IpProtocol": "tcp",
            "FromPort": "5432",
            "ToPort": "5432",
            "CidrIp": {
              "Ref": "TrustedOfficeIp"
            }
          }
        ]
      }
    },
    "DBInstanceEndpointCNAME": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Fn::If": [
            "CreateHostedZone",
            {
              "Ref": "HostedZone"
            },
            {
              "Ref": "HostedZoneId"
            }
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              "db-balancer",
              {
                "Ref": "EnvironmentName"
              },
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "DomainName"
              }
            ]
          ]
        },
        "Type": "CNAME",
        "SetIdentifier": {
          "Ref": "AWS::StackName"
        },
        "TTL": 60,
        "Weight": 10,
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "DBInstance",
              "Endpoint.Address"
            ]
          }
        ]
      }
    },
    "Vpc": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "vpc"
          ]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "PrivDataSubnetAz1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedVpcAvailabilityZones",
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "privdatasubnet1"
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivDataSubnetAz2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedVpcAvailabilityZones",
            {
              "Fn::Select": [
                "1",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                "1",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "privdatasubnet2"
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PubSubnetAz1": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet1"
          ]
        },
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedVpcAvailabilityZones",
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "PubSubnetAz2": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet2"
          ]
        },
        "AvailabilityZone": {
          "Fn::If": [
            "UseSpecifiedVpcAvailabilityZones",
            {
              "Fn::Select": [
                "1",
                {
                  "Ref": "VpcAvailabilityZones"
                }
              ]
            },
            {
              "Fn::Select": [
                "1",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "NatInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "InstanceType": {
          "Ref": "NatInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "NatInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "NatSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PubSubnetAz1"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "set -x\n",
                "\n",
                "(  ## send all output to the console also\n",
                "sysctl net.ipv4.ip_forward=1\n",
                "iptables -t nat -A POSTROUTING -o eth0 -s ",
                {
                  "Fn::FindInMap": [
                    "VpcCidrs",
                    {
                      "Ref": "AWS::Region"
                    },
                    "privdatasubnet1"
                  ]
                },
                " -j MASQUERADE\n",
                "iptables -t nat -A POSTROUTING -o eth0 -s ",
                {
                  "Fn::FindInMap": [
                    "VpcCidrs",
                    {
                      "Ref": "AWS::Region"
                    },
                    "privdatasubnet2"
                  ]
                },
                " -j MASQUERADE\n",
                ") 2>&1 | tee -a /dev/console  ## send all output to the console also\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "NatSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the NAT instance",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "TrustedOfficeIp"
            }
          },
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Fn::FindInMap": [
                "VpcCidrs",
                {
                  "Ref": "AWS::Region"
                },
                "vpc"
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteViaIgw": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicRouteViaIgw": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PubSubnet1RouteTableAssociation": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz1"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "PubSubnet2RouteTableAssociation": {
      "Condition": "CreateVpcResources",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz2"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "HostedZone": {
      "Condition": "CreateHostedZone",
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "Public hosted zone"
        },
        "Name": {
          "Ref": "DomainName"
        }
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Description": "VPC",
      "Value": {
        "Ref": "Vpc"
      }
    },
    "PubSubnetId1": {
      "Description": "PubSubnetAz1",
      "Value": {
        "Ref": "PubSubnetAz1"
      }
    },
    "PubSubnetId2": {
      "Description": "PubSubnetAz2",
      "Value": {
        "Ref": "PubSubnetAz2"
      }
    }
  }
}
